#!/bin/bash
#
# Pause all players and make sure they are not using the sound card anymore
#

CARD=`aplay -l | grep -i hifiberry | awk '{print $2}' | sed s/://`
DATE1=`date +%Y%m%d-%H%M%S`
PLAYER=$1

check_paused() {
  STATUS=`cat /proc/asound/card${CARD}/pcm0p/sub0/hw_params`
  if [ "$STATUS" == "closed" ]; then
    DATE2=`date +%Y%m%d-%H%M%S`
    echo "$DATE1 $DATE2 pause-all $PLAYER" >> /var/log/hifiberry.log
    exit 0
  fi
  PROCESS=`lsof | grep /dev/snd | grep pcmC${CARD} | awk '{print $2}'`
  APP=`basename $PROCESS`
}

pause_spotify() {
  # TODO
  echo "not yet implemented"
}

pause_mpd() {
  mpc pause
}

pause_bluetooth() {
  # TODO
  echo "not yet implemented"
}

pause_raat() {
  pkill -USR1 raat_app
  # unfortunately it takes 5s until RAAT stops using the sound card
  ## therefore, we're restarting the service
  pkill raat_app 
}

pause_spotify() {
  # TODO
  echo "not yet implemented"
}

pause_shairport() {
  # TODO
  echo "not yet implemented"
}

pause_squeezelite() {
  # TODO
  echo "not yet implemented"
}

pause_process() {
  case $APP in
    mpd)
      pause_mpd
      ;;
    raat_app)
      pause_raat
      ;;
    *)
      echo "don't know how to pause $APP"
      ;;
  esac
}

kill_process() {
  pkill $APP
  sleep 1
  PID=`pgrep $PROCESS`
  if [ "$PID" != "" ]; then
    pkill -KILL $APP
  fi
}

# Check if something is playing at all
check_paused

# Try to control the player directly, this might not work
# for all players
pause_process
check_paused

# Use API to pause
curl -X post http://localhost:81/api/player/pause ; echo
for i in 1 1 1 1 1; do 
 sleep $i
 check_paused
done

# Still in use
echo "$APP still using the sound card killing it"
kill_process

# Now it should REALLY be available
check_paused

# Still not? Something is wrong, exit with exit code 1
DATE2=`date +%Y%m%d-%H%M%S`
echo "$DATE1 $DATE2 pause-all $1 failed, $APP still running " >> /var/log/hifiberry.log
exit 1
